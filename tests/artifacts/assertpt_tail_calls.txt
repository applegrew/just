single_line_comment => (0,56) #"// Recursive tail-calls can fill the stack rapidly while"
single_line_comment => (57,112) #"// it is possible to optimize this call. ES6 introduces"
single_line_comment => (113,145) #"// such a tail-call optimization"
declaration => (146,264) #"function factorial(n, acc = 1) {\n    \'use strict\';\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}"
__hoistable_declaration => (146,264) #"function factorial(n, acc = 1) {\n    \'use strict\';\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}"
____function_declaration => (146,264) #"function factorial(n, acc = 1) {\n    \'use strict\';\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}"
______binding_identifier => (155,164) #"factorial"
______formal_parameters => (165,175) #"n, acc = 1"
________formal_parameter => (165,166) #"n"
__________binding_element => (165,166) #"n"
____________single_name_binding => (165,166) #"n"
______________binding_identifier => (165,166) #"n"
________formal_parameter => (168,175) #"acc = 1"
__________binding_element => (168,175) #"acc = 1"
____________single_name_binding => (168,175) #"acc = 1"
______________binding_identifier => (168,171) #"acc"
______________initializer__in => (172,175) #"= 1"
________________assignment_expression__in => (174,175) #"1"
__________________conditional_expression__in => (174,175) #"1"
____________________logical_or_expression__in => (174,175) #"1"
______________________logical_and_expression__in => (174,175) #"1"
________________________bitwise_or_expression__in => (174,175) #"1"
__________________________bitwise_xor_expression__in => (174,175) #"1"
____________________________bitwise_and_expression__in => (174,175) #"1"
______________________________equality_expression__in => (174,175) #"1"
________________________________relational_expression__in => (174,175) #"1"
__________________________________shift_expression => (174,175) #"1"
____________________________________additive_expression => (174,175) #"1"
______________________________________multiplicative_expression => (174,175) #"1"
________________________________________unary_expression => (174,175) #"1"
__________________________________________postfix_expression => (174,175) #"1"
____________________________________________left_hand_side_expression => (174,175) #"1"
______________________________________________new_expression => (174,175) #"1"
________________________________________________member_expression => (174,175) #"1"
__________________________________________________primary_expression => (174,175) #"1"
____________________________________________________literal => (174,175) #"1"
______________________________________________________numeric_literal => (174,175) #"1"
________________________________________________________decimal_literal => (174,175) #"1"
__________________________________________________________decimal_integer_literal => (174,175) #"1"
______function_body => (183,263) #"\'use strict\';\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n"
________expression_statement => (183,196) #"\'use strict\';"
__________expression__in => (183,195) #"\'use strict\'"
____________assignment_expression__in => (183,195) #"\'use strict\'"
______________conditional_expression__in => (183,195) #"\'use strict\'"
________________logical_or_expression__in => (183,195) #"\'use strict\'"
__________________logical_and_expression__in => (183,195) #"\'use strict\'"
____________________bitwise_or_expression__in => (183,195) #"\'use strict\'"
______________________bitwise_xor_expression__in => (183,195) #"\'use strict\'"
________________________bitwise_and_expression__in => (183,195) #"\'use strict\'"
__________________________equality_expression__in => (183,195) #"\'use strict\'"
____________________________relational_expression__in => (183,195) #"\'use strict\'"
______________________________shift_expression => (183,195) #"\'use strict\'"
________________________________additive_expression => (183,195) #"\'use strict\'"
__________________________________multiplicative_expression => (183,195) #"\'use strict\'"
____________________________________unary_expression => (183,195) #"\'use strict\'"
______________________________________postfix_expression => (183,195) #"\'use strict\'"
________________________________________left_hand_side_expression => (183,195) #"\'use strict\'"
__________________________________________new_expression => (183,195) #"\'use strict\'"
____________________________________________member_expression => (183,195) #"\'use strict\'"
______________________________________________primary_expression => (183,195) #"\'use strict\'"
________________________________________________literal => (183,195) #"\'use strict\'"
__________________________________________________string_literal => (183,195) #"\'use strict\'"
__________smart_semicolon => (195,196) #";"
________if_statement__return => (201,224) #"if (n <= 1) return acc;"
__________expression__in => (205,211) #"n <= 1"
____________assignment_expression__in => (205,211) #"n <= 1"
______________conditional_expression__in => (205,211) #"n <= 1"
________________logical_or_expression__in => (205,211) #"n <= 1"
__________________logical_and_expression__in => (205,211) #"n <= 1"
____________________bitwise_or_expression__in => (205,211) #"n <= 1"
______________________bitwise_xor_expression__in => (205,211) #"n <= 1"
________________________bitwise_and_expression__in => (205,211) #"n <= 1"
__________________________equality_expression__in => (205,211) #"n <= 1"
____________________________relational_expression__in => (205,211) #"n <= 1"
______________________________shift_expression => (205,207) #"n "
________________________________additive_expression => (205,207) #"n "
__________________________________multiplicative_expression => (205,207) #"n "
____________________________________unary_expression => (205,207) #"n "
______________________________________postfix_expression => (205,207) #"n "
________________________________________left_hand_side_expression => (205,207) #"n "
__________________________________________new_expression => (205,207) #"n "
____________________________________________member_expression => (205,207) #"n "
______________________________________________primary_expression => (205,206) #"n"
________________________________________________identifier_reference => (205,206) #"n"
______________________________shift_expression => (210,211) #"1"
________________________________additive_expression => (210,211) #"1"
__________________________________multiplicative_expression => (210,211) #"1"
____________________________________unary_expression => (210,211) #"1"
______________________________________postfix_expression => (210,211) #"1"
________________________________________left_hand_side_expression => (210,211) #"1"
__________________________________________new_expression => (210,211) #"1"
____________________________________________member_expression => (210,211) #"1"
______________________________________________primary_expression => (210,211) #"1"
________________________________________________literal => (210,211) #"1"
__________________________________________________numeric_literal => (210,211) #"1"
____________________________________________________decimal_literal => (210,211) #"1"
______________________________________________________decimal_integer_literal => (210,211) #"1"
__________return_statement => (213,224) #"return acc;"
____________expression__in => (220,223) #"acc"
______________assignment_expression__in => (220,223) #"acc"
________________conditional_expression__in => (220,223) #"acc"
__________________logical_or_expression__in => (220,223) #"acc"
____________________logical_and_expression__in => (220,223) #"acc"
______________________bitwise_or_expression__in => (220,223) #"acc"
________________________bitwise_xor_expression__in => (220,223) #"acc"
__________________________bitwise_and_expression__in => (220,223) #"acc"
____________________________equality_expression__in => (220,223) #"acc"
______________________________relational_expression__in => (220,223) #"acc"
________________________________shift_expression => (220,223) #"acc"
__________________________________additive_expression => (220,223) #"acc"
____________________________________multiplicative_expression => (220,223) #"acc"
______________________________________unary_expression => (220,223) #"acc"
________________________________________postfix_expression => (220,223) #"acc"
__________________________________________left_hand_side_expression => (220,223) #"acc"
____________________________________________new_expression => (220,223) #"acc"
______________________________________________member_expression => (220,223) #"acc"
________________________________________________primary_expression => (220,223) #"acc"
__________________________________________________identifier_reference => (220,223) #"acc"
____________smart_semicolon => (223,224) #";"
________return_statement => (229,262) #"return factorial(n - 1, n * acc);"
__________expression__in => (236,261) #"factorial(n - 1, n * acc)"
____________assignment_expression__in => (236,261) #"factorial(n - 1, n * acc)"
______________conditional_expression__in => (236,261) #"factorial(n - 1, n * acc)"
________________logical_or_expression__in => (236,261) #"factorial(n - 1, n * acc)"
__________________logical_and_expression__in => (236,261) #"factorial(n - 1, n * acc)"
____________________bitwise_or_expression__in => (236,261) #"factorial(n - 1, n * acc)"
______________________bitwise_xor_expression__in => (236,261) #"factorial(n - 1, n * acc)"
________________________bitwise_and_expression__in => (236,261) #"factorial(n - 1, n * acc)"
__________________________equality_expression__in => (236,261) #"factorial(n - 1, n * acc)"
____________________________relational_expression__in => (236,261) #"factorial(n - 1, n * acc)"
______________________________shift_expression => (236,261) #"factorial(n - 1, n * acc)"
________________________________additive_expression => (236,261) #"factorial(n - 1, n * acc)"
__________________________________multiplicative_expression => (236,261) #"factorial(n - 1, n * acc)"
____________________________________unary_expression => (236,261) #"factorial(n - 1, n * acc)"
______________________________________postfix_expression => (236,261) #"factorial(n - 1, n * acc)"
________________________________________left_hand_side_expression => (236,261) #"factorial(n - 1, n * acc)"
__________________________________________call_expression => (236,261) #"factorial(n - 1, n * acc)"
____________________________________________member_expression => (236,245) #"factorial"
______________________________________________primary_expression => (236,245) #"factorial"
________________________________________________identifier_reference => (236,245) #"factorial"
____________________________________________arguments => (245,261) #"(n - 1, n * acc)"
______________________________________________argument_list => (246,260) #"n - 1, n * acc"
________________________________________________assignment_expression__in => (246,251) #"n - 1"
__________________________________________________conditional_expression__in => (246,251) #"n - 1"
____________________________________________________logical_or_expression__in => (246,251) #"n - 1"
______________________________________________________logical_and_expression__in => (246,251) #"n - 1"
________________________________________________________bitwise_or_expression__in => (246,251) #"n - 1"
__________________________________________________________bitwise_xor_expression__in => (246,251) #"n - 1"
____________________________________________________________bitwise_and_expression__in => (246,251) #"n - 1"
______________________________________________________________equality_expression__in => (246,251) #"n - 1"
________________________________________________________________relational_expression__in => (246,251) #"n - 1"
__________________________________________________________________shift_expression => (246,251) #"n - 1"
____________________________________________________________________additive_expression => (246,251) #"n - 1"
______________________________________________________________________multiplicative_expression => (246,248) #"n "
________________________________________________________________________unary_expression => (246,248) #"n "
__________________________________________________________________________postfix_expression => (246,248) #"n "
____________________________________________________________________________left_hand_side_expression => (246,248) #"n "
______________________________________________________________________________new_expression => (246,248) #"n "
________________________________________________________________________________member_expression => (246,248) #"n "
__________________________________________________________________________________primary_expression => (246,247) #"n"
____________________________________________________________________________________identifier_reference => (246,247) #"n"
______________________________________________________________________multiplicative_expression => (250,251) #"1"
________________________________________________________________________unary_expression => (250,251) #"1"
__________________________________________________________________________postfix_expression => (250,251) #"1"
____________________________________________________________________________left_hand_side_expression => (250,251) #"1"
______________________________________________________________________________new_expression => (250,251) #"1"
________________________________________________________________________________member_expression => (250,251) #"1"
__________________________________________________________________________________primary_expression => (250,251) #"1"
____________________________________________________________________________________literal => (250,251) #"1"
______________________________________________________________________________________numeric_literal => (250,251) #"1"
________________________________________________________________________________________decimal_literal => (250,251) #"1"
__________________________________________________________________________________________decimal_integer_literal => (250,251) #"1"
________________________________________________assignment_expression__in => (253,260) #"n * acc"
__________________________________________________conditional_expression__in => (253,260) #"n * acc"
____________________________________________________logical_or_expression__in => (253,260) #"n * acc"
______________________________________________________logical_and_expression__in => (253,260) #"n * acc"
________________________________________________________bitwise_or_expression__in => (253,260) #"n * acc"
__________________________________________________________bitwise_xor_expression__in => (253,260) #"n * acc"
____________________________________________________________bitwise_and_expression__in => (253,260) #"n * acc"
______________________________________________________________equality_expression__in => (253,260) #"n * acc"
________________________________________________________________relational_expression__in => (253,260) #"n * acc"
__________________________________________________________________shift_expression => (253,260) #"n * acc"
____________________________________________________________________additive_expression => (253,260) #"n * acc"
______________________________________________________________________multiplicative_expression => (253,260) #"n * acc"
________________________________________________________________________unary_expression => (253,255) #"n "
__________________________________________________________________________postfix_expression => (253,255) #"n "
____________________________________________________________________________left_hand_side_expression => (253,255) #"n "
______________________________________________________________________________new_expression => (253,255) #"n "
________________________________________________________________________________member_expression => (253,255) #"n "
__________________________________________________________________________________primary_expression => (253,254) #"n"
____________________________________________________________________________________identifier_reference => (253,254) #"n"
________________________________________________________________________multiplicative_operator => (255,256) #"*"
________________________________________________________________________unary_expression => (257,260) #"acc"
__________________________________________________________________________postfix_expression => (257,260) #"acc"
____________________________________________________________________________left_hand_side_expression => (257,260) #"acc"
______________________________________________________________________________new_expression => (257,260) #"acc"
________________________________________________________________________________member_expression => (257,260) #"acc"
__________________________________________________________________________________primary_expression => (257,260) #"acc"
____________________________________________________________________________________identifier_reference => (257,260) #"acc"
__________smart_semicolon => (261,262) #";"
single_line_comment => (266,314) #"// Stack overflow in most implementations today,"
single_line_comment => (315,353) #"// but safe on arbitrary inputs in eS6"
expression_statement => (354,387) #"console.log( factorial(100000) );"
__expression__in => (354,386) #"console.log( factorial(100000) )"
____assignment_expression__in => (354,386) #"console.log( factorial(100000) )"
______conditional_expression__in => (354,386) #"console.log( factorial(100000) )"
________logical_or_expression__in => (354,386) #"console.log( factorial(100000) )"
__________logical_and_expression__in => (354,386) #"console.log( factorial(100000) )"
____________bitwise_or_expression__in => (354,386) #"console.log( factorial(100000) )"
______________bitwise_xor_expression__in => (354,386) #"console.log( factorial(100000) )"
________________bitwise_and_expression__in => (354,386) #"console.log( factorial(100000) )"
__________________equality_expression__in => (354,386) #"console.log( factorial(100000) )"
____________________relational_expression__in => (354,386) #"console.log( factorial(100000) )"
______________________shift_expression => (354,386) #"console.log( factorial(100000) )"
________________________additive_expression => (354,386) #"console.log( factorial(100000) )"
__________________________multiplicative_expression => (354,386) #"console.log( factorial(100000) )"
____________________________unary_expression => (354,386) #"console.log( factorial(100000) )"
______________________________postfix_expression => (354,386) #"console.log( factorial(100000) )"
________________________________left_hand_side_expression => (354,386) #"console.log( factorial(100000) )"
__________________________________call_expression => (354,386) #"console.log( factorial(100000) )"
____________________________________member_expression => (354,365) #"console.log"
______________________________________primary_expression => (354,361) #"console"
________________________________________identifier_reference => (354,361) #"console"
______________________________________identifier_name => (362,365) #"log"
____________________________________arguments => (365,386) #"( factorial(100000) )"
______________________________________argument_list => (367,385) #"factorial(100000) "
________________________________________assignment_expression__in => (367,385) #"factorial(100000) "
__________________________________________conditional_expression__in => (367,385) #"factorial(100000) "
____________________________________________logical_or_expression__in => (367,385) #"factorial(100000) "
______________________________________________logical_and_expression__in => (367,385) #"factorial(100000) "
________________________________________________bitwise_or_expression__in => (367,385) #"factorial(100000) "
__________________________________________________bitwise_xor_expression__in => (367,385) #"factorial(100000) "
____________________________________________________bitwise_and_expression__in => (367,385) #"factorial(100000) "
______________________________________________________equality_expression__in => (367,385) #"factorial(100000) "
________________________________________________________relational_expression__in => (367,385) #"factorial(100000) "
__________________________________________________________shift_expression => (367,385) #"factorial(100000) "
____________________________________________________________additive_expression => (367,385) #"factorial(100000) "
______________________________________________________________multiplicative_expression => (367,385) #"factorial(100000) "
________________________________________________________________unary_expression => (367,385) #"factorial(100000) "
__________________________________________________________________postfix_expression => (367,385) #"factorial(100000) "
____________________________________________________________________left_hand_side_expression => (367,385) #"factorial(100000) "
______________________________________________________________________call_expression => (367,385) #"factorial(100000) "
________________________________________________________________________member_expression => (367,376) #"factorial"
__________________________________________________________________________primary_expression => (367,376) #"factorial"
____________________________________________________________________________identifier_reference => (367,376) #"factorial"
________________________________________________________________________arguments => (376,384) #"(100000)"
__________________________________________________________________________argument_list => (377,383) #"100000"
____________________________________________________________________________assignment_expression__in => (377,383) #"100000"
______________________________________________________________________________conditional_expression__in => (377,383) #"100000"
________________________________________________________________________________logical_or_expression__in => (377,383) #"100000"
__________________________________________________________________________________logical_and_expression__in => (377,383) #"100000"
____________________________________________________________________________________bitwise_or_expression__in => (377,383) #"100000"
______________________________________________________________________________________bitwise_xor_expression__in => (377,383) #"100000"
________________________________________________________________________________________bitwise_and_expression__in => (377,383) #"100000"
__________________________________________________________________________________________equality_expression__in => (377,383) #"100000"
____________________________________________________________________________________________relational_expression__in => (377,383) #"100000"
______________________________________________________________________________________________shift_expression => (377,383) #"100000"
________________________________________________________________________________________________additive_expression => (377,383) #"100000"
__________________________________________________________________________________________________multiplicative_expression => (377,383) #"100000"
____________________________________________________________________________________________________unary_expression => (377,383) #"100000"
______________________________________________________________________________________________________postfix_expression => (377,383) #"100000"
________________________________________________________________________________________________________left_hand_side_expression => (377,383) #"100000"
__________________________________________________________________________________________________________new_expression => (377,383) #"100000"
____________________________________________________________________________________________________________member_expression => (377,383) #"100000"
______________________________________________________________________________________________________________primary_expression => (377,383) #"100000"
________________________________________________________________________________________________________________literal => (377,383) #"100000"
__________________________________________________________________________________________________________________numeric_literal => (377,383) #"100000"
____________________________________________________________________________________________________________________decimal_literal => (377,383) #"100000"
______________________________________________________________________________________________________________________decimal_integer_literal => (377,383) #"100000"
__smart_semicolon => (386,387) #";"
