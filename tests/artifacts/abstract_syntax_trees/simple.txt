ProgramData {
  meta: Meta { "var a = 10, b = 20;░░c = 30;░░function cal(a, b) {░    return a + b;░}░░var c = cal(a, b);░░" },
  body: [
    StatementType::DeclarationStatement(DeclarationType::VariableDeclaration(VariableDeclarationData {
      meta: Meta { "var a = 10, b = 20;░" },
      declarations: [
        VariableDeclaratorData {
          meta: Meta { "a = 10" },
          id: PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
            meta: Meta { "a" },
            name: a,
          })),
          init: ExpressionType::Literal(LiteralData {
            meta: Meta { "10" },
            value: NumberLiteral(IntegerLiteral(10)),
          }),
        },
        VariableDeclaratorData {
          meta: Meta { "b = 20" },
          id: PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
            meta: Meta { "b" },
            name: b,
          })),
          init: ExpressionType::Literal(LiteralData {
            meta: Meta { "20" },
            value: NumberLiteral(IntegerLiteral(20)),
          }),
        },
      ],
      kind: Var,
    })),
    StatementType::ExpressionStatement {
      meta: Meta { "c = 30;░" },
      expression: ExpressionType::SequenceExpression {
        meta: Meta { "c = 30" },
        expressions: [
          ExpressionType::AssignmentExpression {
            meta: Meta { "c = 30" },
            operator: Equals,
            left: ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
              meta: Meta { "c" },
              name: c,
            })),
            right: ExpressionType::Literal(LiteralData {
              meta: Meta { "30" },
              value: NumberLiteral(IntegerLiteral(30)),
            }),
          },
        ],
      },
    },
    StatementType::DeclarationStatement(DeclarationType::FunctionDeclaration(FunctionData {
      meta: Meta { "function cal(a, b) {░    return a + b;░}" },
      id: IdentifierData {
        meta: Meta { "cal" },
        name: cal,
      },
      params: [
        PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
          meta: Meta { "a" },
          name: a,
        })),
        PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
          meta: Meta { "b" },
          name: b,
        })),
      ],
      body: FunctionBodyData {
        meta: Meta { "return a + b;░" },
        body: [
          StatementType::ReturnStatement {
            meta: Meta { "return a + b;░" },
            argument: ExpressionType::SequenceExpression {
              meta: Meta { "a + b" },
              expressions: [
                ExpressionType::BinaryExpression {
                  meta: Meta { "a + b" },
                  operator: Add,
                  left: ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "a" },
                    name: a,
                  })),
                  right: ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "b" },
                    name: b,
                  })),
                },
              ],
            },
          },
        ],
      },
      generator: false,
    })),
    StatementType::DeclarationStatement(DeclarationType::VariableDeclaration(VariableDeclarationData {
      meta: Meta { "var c = cal(a, b);░" },
      declarations: [
        VariableDeclaratorData {
          meta: Meta { "c = cal(a, b)" },
          id: PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
            meta: Meta { "c" },
            name: c,
          })),
          init: ExpressionType::CallExpression {
            meta: Meta { "cal" },
            callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
              meta: Meta { "cal" },
              name: cal,
            }))),
            arguments: [
              ExpressionOrSpreadElement::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                meta: Meta { "a" },
                name: a,
              }))),
              ExpressionOrSpreadElement::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                meta: Meta { "b" },
                name: b,
              }))),
            ],
          },
        },
      ],
      kind: Var,
    })),
  ],
}
