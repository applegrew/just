ProgramData {
  meta: Meta { "░function gen() {░    var fs = [];░    for (var i = 0; i < 10; i++) {░        fs.push(function () {░            return i;░        });░    }░    return fs;░}░░var gs = gen();░░console.log(gs[0]());░console.log(gs[1]());░console.log(gs[8]());░console.log(gs[9]());░" },
  body: [
    StatementType::DeclarationStatement(DeclarationType::FunctionDeclaration(FunctionData {
      meta: Meta { "function gen() {░    var fs = [];░    for (var i = 0; i < 10; i++) {░        fs.push(function () {░            return i;░        });░    }░    return fs;░}" },
      id: IdentifierData {
        meta: Meta { "gen" },
        name: gen,
      },
      params: [
      ],
      body: FunctionBodyData {
        meta: Meta { "var fs = [];░    for (var i = 0; i < 10; i++) {░        fs.push(function () {░            return i;░        });░    }░    return fs;░" },
        body: [
          StatementType::DeclarationStatement(DeclarationType::VariableDeclaration(VariableDeclarationData {
            meta: Meta { "var fs = [];░" },
            declarations: [
              VariableDeclaratorData {
                meta: Meta { "fs = []" },
                id: PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
                  meta: Meta { "fs" },
                  name: fs,
                })),
                init: ExpressionType::ArrayExpression {
                  meta: Meta { "[]" },
                  elements: [
                  ],
                },
              },
            ],
            kind: Var,
          })),
          StatementType::ForStatement {
            meta: Meta { "for (var i = 0; i < 10; i++) {░        fs.push(function () {░            return i;░        });░    }" },
            init: VariableDeclarationOrExpression::VariableDeclaration(VariableDeclarationData {
              meta: Meta { "i = 0" },
              declarations: [
                VariableDeclaratorData {
                  meta: Meta { "i = 0" },
                  id: PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "i" },
                    name: i,
                  })),
                  init: ExpressionType::Literal(LiteralData {
                    meta: Meta { "0" },
                    value: NumberLiteral(IntegerLiteral(0)),
                  }),
                },
              ],
              kind: Var,
            }),
            test: ExpressionType::SequenceExpression {
              meta: Meta { "i < 10" },
              expressions: [
                ExpressionType::BinaryExpression {
                  meta: Meta { "i < 10" },
                  operator: LessThan,
                  left: ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "i" },
                    name: i,
                  })),
                  right: ExpressionType::Literal(LiteralData {
                    meta: Meta { "10" },
                    value: NumberLiteral(IntegerLiteral(10)),
                  }),
                },
              ],
            },
            update: ExpressionType::SequenceExpression {
              meta: Meta { "i++" },
              expressions: [
                ExpressionType::UpdateExpression {
                  meta: Meta { "i++" },
                  operator: PlusPlus,
                  argument: ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "i" },
                    name: i,
                  })),
                  prefix: false,
                },
              ],
            },
            body: StatementType::BlockStatement(BlockStatementData {
              meta: Meta { "{░        fs.push(function () {░            return i;░        });░    }" },
              body: [
                StatementType::ExpressionStatement {
                  meta: Meta { "fs.push(function () {░            return i;░        });░" },
                  expression: ExpressionType::SequenceExpression {
                    meta: Meta { "fs.push(function () {░            return i;░        })" },
                    expressions: [
                      ExpressionType::CallExpression {
                        meta: Meta { "fs.push" },
                        callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::SimpleMemberExpression {
                          meta: Meta { "fs.push" },
                          object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                            meta: Meta { "fs" },
                            name: fs,
                          }))),
                          property: IdentifierData {
                            meta: Meta { "push" },
                            name: push,
                          },
                        }))),
                        arguments: [
                          ExpressionOrSpreadElement::Expression(ExpressionType::FunctionExpression(FunctionData {
                            meta: Meta { "function () {░            return i;░        }" },
                            id: <None>,
                            params: [
                            ],
                            body: FunctionBodyData {
                              meta: Meta { "return i;░        " },
                              body: [
                                StatementType::ReturnStatement {
                                  meta: Meta { "return i;░" },
                                  argument: ExpressionType::SequenceExpression {
                                    meta: Meta { "i" },
                                    expressions: [
                                      ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                                        meta: Meta { "i" },
                                        name: i,
                                      })),
                                    ],
                                  },
                                },
                              ],
                            },
                            generator: false,
                          })),
                        ],
                      },
                    ],
                  },
                },
              ],
            }),
          },
          StatementType::ReturnStatement {
            meta: Meta { "return fs;░" },
            argument: ExpressionType::SequenceExpression {
              meta: Meta { "fs" },
              expressions: [
                ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                  meta: Meta { "fs" },
                  name: fs,
                })),
              ],
            },
          },
        ],
      },
      generator: false,
    })),
    StatementType::DeclarationStatement(DeclarationType::VariableDeclaration(VariableDeclarationData {
      meta: Meta { "var gs = gen();░" },
      declarations: [
        VariableDeclaratorData {
          meta: Meta { "gs = gen()" },
          id: PatternType::PatternWhichCanBeExpression(ExpressionPatternType::Identifier(IdentifierData {
            meta: Meta { "gs" },
            name: gs,
          })),
          init: ExpressionType::CallExpression {
            meta: Meta { "gen" },
            callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
              meta: Meta { "gen" },
              name: gen,
            }))),
            arguments: [
            ],
          },
        },
      ],
      kind: Var,
    })),
    StatementType::ExpressionStatement {
      meta: Meta { "console.log(gs[0]());░" },
      expression: ExpressionType::SequenceExpression {
        meta: Meta { "console.log(gs[0]())" },
        expressions: [
          ExpressionType::CallExpression {
            meta: Meta { "console.log" },
            callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::SimpleMemberExpression {
              meta: Meta { "console.log" },
              object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                meta: Meta { "console" },
                name: console,
              }))),
              property: IdentifierData {
                meta: Meta { "log" },
                name: log,
              },
            }))),
            arguments: [
              ExpressionOrSpreadElement::Expression(ExpressionType::CallExpression {
                meta: Meta { "gs[0]" },
                callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::ComputedMemberExpression {
                  meta: Meta { "gs[0" },
                  object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "gs" },
                    name: gs,
                  }))),
                  property: ExpressionType::SequenceExpression {
                    meta: Meta { "0" },
                    expressions: [
                      ExpressionType::Literal(LiteralData {
                        meta: Meta { "0" },
                        value: NumberLiteral(IntegerLiteral(0)),
                      }),
                    ],
                  },
                }))),
                arguments: [
                ],
              }),
            ],
          },
        ],
      },
    },
    StatementType::ExpressionStatement {
      meta: Meta { "console.log(gs[1]());░" },
      expression: ExpressionType::SequenceExpression {
        meta: Meta { "console.log(gs[1]())" },
        expressions: [
          ExpressionType::CallExpression {
            meta: Meta { "console.log" },
            callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::SimpleMemberExpression {
              meta: Meta { "console.log" },
              object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                meta: Meta { "console" },
                name: console,
              }))),
              property: IdentifierData {
                meta: Meta { "log" },
                name: log,
              },
            }))),
            arguments: [
              ExpressionOrSpreadElement::Expression(ExpressionType::CallExpression {
                meta: Meta { "gs[1]" },
                callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::ComputedMemberExpression {
                  meta: Meta { "gs[1" },
                  object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "gs" },
                    name: gs,
                  }))),
                  property: ExpressionType::SequenceExpression {
                    meta: Meta { "1" },
                    expressions: [
                      ExpressionType::Literal(LiteralData {
                        meta: Meta { "1" },
                        value: NumberLiteral(IntegerLiteral(1)),
                      }),
                    ],
                  },
                }))),
                arguments: [
                ],
              }),
            ],
          },
        ],
      },
    },
    StatementType::ExpressionStatement {
      meta: Meta { "console.log(gs[8]());░" },
      expression: ExpressionType::SequenceExpression {
        meta: Meta { "console.log(gs[8]())" },
        expressions: [
          ExpressionType::CallExpression {
            meta: Meta { "console.log" },
            callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::SimpleMemberExpression {
              meta: Meta { "console.log" },
              object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                meta: Meta { "console" },
                name: console,
              }))),
              property: IdentifierData {
                meta: Meta { "log" },
                name: log,
              },
            }))),
            arguments: [
              ExpressionOrSpreadElement::Expression(ExpressionType::CallExpression {
                meta: Meta { "gs[8]" },
                callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::ComputedMemberExpression {
                  meta: Meta { "gs[8" },
                  object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "gs" },
                    name: gs,
                  }))),
                  property: ExpressionType::SequenceExpression {
                    meta: Meta { "8" },
                    expressions: [
                      ExpressionType::Literal(LiteralData {
                        meta: Meta { "8" },
                        value: NumberLiteral(IntegerLiteral(8)),
                      }),
                    ],
                  },
                }))),
                arguments: [
                ],
              }),
            ],
          },
        ],
      },
    },
    StatementType::ExpressionStatement {
      meta: Meta { "console.log(gs[9]());░" },
      expression: ExpressionType::SequenceExpression {
        meta: Meta { "console.log(gs[9]())" },
        expressions: [
          ExpressionType::CallExpression {
            meta: Meta { "console.log" },
            callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::SimpleMemberExpression {
              meta: Meta { "console.log" },
              object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                meta: Meta { "console" },
                name: console,
              }))),
              property: IdentifierData {
                meta: Meta { "log" },
                name: log,
              },
            }))),
            arguments: [
              ExpressionOrSpreadElement::Expression(ExpressionType::CallExpression {
                meta: Meta { "gs[9]" },
                callee: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::MemberExpression(MemberExpressionType::ComputedMemberExpression {
                  meta: Meta { "gs[9" },
                  object: ExpressionOrSuper::Expression(ExpressionType::ExpressionWhichCanBePattern(ExpressionPatternType::Identifier(IdentifierData {
                    meta: Meta { "gs" },
                    name: gs,
                  }))),
                  property: ExpressionType::SequenceExpression {
                    meta: Meta { "9" },
                    expressions: [
                      ExpressionType::Literal(LiteralData {
                        meta: Meta { "9" },
                        value: NumberLiteral(IntegerLiteral(9)),
                      }),
                    ],
                  },
                }))),
                arguments: [
                ],
              }),
            ],
          },
        ],
      },
    },
  ],
}
