declaration => (190,319) #"function f() {\n    let x = \'n\';\n    {\n        // okay, block scoped name\n        const x = \"sneaky\";\n    }\n\n    console.log(x);\n}"
__hoistable_declaration => (190,319) #"function f() {\n    let x = \'n\';\n    {\n        // okay, block scoped name\n        const x = \"sneaky\";\n    }\n\n    console.log(x);\n}"
____function_declaration => (190,319) #"function f() {\n    let x = \'n\';\n    {\n        // okay, block scoped name\n        const x = \"sneaky\";\n    }\n\n    console.log(x);\n}"
______binding_identifier => (199,200) #"f"
______formal_parameters => (201,201) #""
______function_body => (209,318) #"let x = \'n\';\n    {\n        // okay, block scoped name\n        const x = \"sneaky\";\n    }\n\n    console.log(x);\n"
________declaration => (209,221) #"let x = \'n\';"
__________lexical_declaration__in => (209,221) #"let x = \'n\';"
____________let_or_const => (209,212) #"let"
____________binding_list__in => (213,220) #"x = \'n\'"
______________lexical_binding__in => (213,220) #"x = \'n\'"
________________binding_identifier => (213,214) #"x"
________________initializer__in => (215,220) #"= \'n\'"
__________________assignment_expression__in => (217,220) #"\'n\'"
____________________conditional_expression__in => (217,220) #"\'n\'"
______________________logical_or_expression__in => (217,220) #"\'n\'"
________________________logical_and_expression__in => (217,220) #"\'n\'"
__________________________bitwise_or_expression__in => (217,220) #"\'n\'"
____________________________bitwise_xor_expression__in => (217,220) #"\'n\'"
______________________________bitwise_and_expression__in => (217,220) #"\'n\'"
________________________________equality_expression__in => (217,220) #"\'n\'"
__________________________________relational_expression__in => (217,220) #"\'n\'"
____________________________________shift_expression => (217,220) #"\'n\'"
______________________________________additive_expression => (217,220) #"\'n\'"
________________________________________multiplicative_expression => (217,220) #"\'n\'"
__________________________________________unary_expression => (217,220) #"\'n\'"
____________________________________________postfix_expression => (217,220) #"\'n\'"
______________________________________________left_hand_side_expression => (217,220) #"\'n\'"
________________________________________________new_expression => (217,220) #"\'n\'"
__________________________________________________member_expression => (217,220) #"\'n\'"
____________________________________________________primary_expression => (217,220) #"\'n\'"
______________________________________________________literal => (217,220) #"\'n\'"
________________________________________________________string_literal => (217,220) #"\'n\'"
____________smart_semicolon => (220,221) #";"
________block_statement__return => (226,296) #"{\n        // okay, block scoped name\n        const x = \"sneaky\";\n    }"
__________block__return => (226,296) #"{\n        // okay, block scoped name\n        const x = \"sneaky\";\n    }"
____________declaration => (271,290) #"const x = \"sneaky\";"
______________lexical_declaration__in => (271,290) #"const x = \"sneaky\";"
________________let_or_const => (271,276) #"const"
________________binding_list__in => (277,289) #"x = \"sneaky\""
__________________lexical_binding__in => (277,289) #"x = \"sneaky\""
____________________binding_identifier => (277,278) #"x"
____________________initializer__in => (279,289) #"= \"sneaky\""
______________________assignment_expression__in => (281,289) #"\"sneaky\""
________________________conditional_expression__in => (281,289) #"\"sneaky\""
__________________________logical_or_expression__in => (281,289) #"\"sneaky\""
____________________________logical_and_expression__in => (281,289) #"\"sneaky\""
______________________________bitwise_or_expression__in => (281,289) #"\"sneaky\""
________________________________bitwise_xor_expression__in => (281,289) #"\"sneaky\""
__________________________________bitwise_and_expression__in => (281,289) #"\"sneaky\""
____________________________________equality_expression__in => (281,289) #"\"sneaky\""
______________________________________relational_expression__in => (281,289) #"\"sneaky\""
________________________________________shift_expression => (281,289) #"\"sneaky\""
__________________________________________additive_expression => (281,289) #"\"sneaky\""
____________________________________________multiplicative_expression => (281,289) #"\"sneaky\""
______________________________________________unary_expression => (281,289) #"\"sneaky\""
________________________________________________postfix_expression => (281,289) #"\"sneaky\""
__________________________________________________left_hand_side_expression => (281,289) #"\"sneaky\""
____________________________________________________new_expression => (281,289) #"\"sneaky\""
______________________________________________________member_expression => (281,289) #"\"sneaky\""
________________________________________________________primary_expression => (281,289) #"\"sneaky\""
__________________________________________________________literal => (281,289) #"\"sneaky\""
____________________________________________________________string_literal => (281,289) #"\"sneaky\""
________________smart_semicolon => (289,290) #";"
________expression_statement => (302,317) #"console.log(x);"
__________expression__in => (302,316) #"console.log(x)"
____________assignment_expression__in => (302,316) #"console.log(x)"
______________conditional_expression__in => (302,316) #"console.log(x)"
________________logical_or_expression__in => (302,316) #"console.log(x)"
__________________logical_and_expression__in => (302,316) #"console.log(x)"
____________________bitwise_or_expression__in => (302,316) #"console.log(x)"
______________________bitwise_xor_expression__in => (302,316) #"console.log(x)"
________________________bitwise_and_expression__in => (302,316) #"console.log(x)"
__________________________equality_expression__in => (302,316) #"console.log(x)"
____________________________relational_expression__in => (302,316) #"console.log(x)"
______________________________shift_expression => (302,316) #"console.log(x)"
________________________________additive_expression => (302,316) #"console.log(x)"
__________________________________multiplicative_expression => (302,316) #"console.log(x)"
____________________________________unary_expression => (302,316) #"console.log(x)"
______________________________________postfix_expression => (302,316) #"console.log(x)"
________________________________________left_hand_side_expression => (302,316) #"console.log(x)"
__________________________________________call_expression => (302,316) #"console.log(x)"
____________________________________________member_expression => (302,313) #"console.log"
______________________________________________primary_expression => (302,309) #"console"
________________________________________________identifier_reference => (302,309) #"console"
______________________________________________identifier_name => (310,313) #"log"
____________________________________________arguments => (313,316) #"(x)"
______________________________________________argument_list => (314,315) #"x"
________________________________________________assignment_expression__in => (314,315) #"x"
__________________________________________________conditional_expression__in => (314,315) #"x"
____________________________________________________logical_or_expression__in => (314,315) #"x"
______________________________________________________logical_and_expression__in => (314,315) #"x"
________________________________________________________bitwise_or_expression__in => (314,315) #"x"
__________________________________________________________bitwise_xor_expression__in => (314,315) #"x"
____________________________________________________________bitwise_and_expression__in => (314,315) #"x"
______________________________________________________________equality_expression__in => (314,315) #"x"
________________________________________________________________relational_expression__in => (314,315) #"x"
__________________________________________________________________shift_expression => (314,315) #"x"
____________________________________________________________________additive_expression => (314,315) #"x"
______________________________________________________________________multiplicative_expression => (314,315) #"x"
________________________________________________________________________unary_expression => (314,315) #"x"
__________________________________________________________________________postfix_expression => (314,315) #"x"
____________________________________________________________________________left_hand_side_expression => (314,315) #"x"
______________________________________________________________________________new_expression => (314,315) #"x"
________________________________________________________________________________member_expression => (314,315) #"x"
__________________________________________________________________________________primary_expression => (314,315) #"x"
____________________________________________________________________________________identifier_reference => (314,315) #"x"
__________smart_semicolon => (316,317) #";"
expression_statement => (321,325) #"f();"
__expression__in => (321,324) #"f()"
____assignment_expression__in => (321,324) #"f()"
______conditional_expression__in => (321,324) #"f()"
________logical_or_expression__in => (321,324) #"f()"
__________logical_and_expression__in => (321,324) #"f()"
____________bitwise_or_expression__in => (321,324) #"f()"
______________bitwise_xor_expression__in => (321,324) #"f()"
________________bitwise_and_expression__in => (321,324) #"f()"
__________________equality_expression__in => (321,324) #"f()"
____________________relational_expression__in => (321,324) #"f()"
______________________shift_expression => (321,324) #"f()"
________________________additive_expression => (321,324) #"f()"
__________________________multiplicative_expression => (321,324) #"f()"
____________________________unary_expression => (321,324) #"f()"
______________________________postfix_expression => (321,324) #"f()"
________________________________left_hand_side_expression => (321,324) #"f()"
__________________________________call_expression => (321,324) #"f()"
____________________________________member_expression => (321,322) #"f"
______________________________________primary_expression => (321,322) #"f"
________________________________________identifier_reference => (321,322) #"f"
____________________________________arguments => (322,324) #"()"
__smart_semicolon => (324,325) #";"
