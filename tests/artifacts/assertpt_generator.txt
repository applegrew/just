statement => (447,668) #"var fibonacci = {\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}\n"
  variable_statement => (447,668) #"var fibonacci = {\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}\n"
    variable_declaration__in => (451,667) #"fibonacci = {\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
      binding_identifier => (451,460) #"fibonacci"
      initializer__in => (461,667) #"= {\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
        assignment_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
          conditional_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
            logical_or_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
              logical_and_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                bitwise_or_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                  bitwise_xor_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                    bitwise_and_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                      equality_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                        relational_expression__in => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                          shift_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                            additive_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                              multiplicative_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                unary_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                  postfix_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                    left_hand_side_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                      new_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                        member_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                          primary_expression => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                            object_literal => (463,667) #"{\n    [Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }\n}"
                                              property_definition_list => (469,665) #"[Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                property_definition => (469,665) #"[Symbol.iterator]: function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                  property_name => (469,486) #"[Symbol.iterator]"
                                                    computed_property_name => (469,486) #"[Symbol.iterator]"
                                                      assignment_expression__in => (470,485) #"Symbol.iterator"
                                                        conditional_expression__in => (470,485) #"Symbol.iterator"
                                                          logical_or_expression__in => (470,485) #"Symbol.iterator"
                                                            logical_and_expression__in => (470,485) #"Symbol.iterator"
                                                              bitwise_or_expression__in => (470,485) #"Symbol.iterator"
                                                                bitwise_xor_expression__in => (470,485) #"Symbol.iterator"
                                                                  bitwise_and_expression__in => (470,485) #"Symbol.iterator"
                                                                    equality_expression__in => (470,485) #"Symbol.iterator"
                                                                      relational_expression__in => (470,485) #"Symbol.iterator"
                                                                        shift_expression => (470,485) #"Symbol.iterator"
                                                                          additive_expression => (470,485) #"Symbol.iterator"
                                                                            multiplicative_expression => (470,485) #"Symbol.iterator"
                                                                              unary_expression => (470,485) #"Symbol.iterator"
                                                                                postfix_expression => (470,485) #"Symbol.iterator"
                                                                                  left_hand_side_expression => (470,485) #"Symbol.iterator"
                                                                                    new_expression => (470,485) #"Symbol.iterator"
                                                                                      member_expression => (470,485) #"Symbol.iterator"
                                                                                        primary_expression => (470,476) #"Symbol"
                                                                                          identifier_reference => (470,476) #"Symbol"
                                                                                        identifier_name => (477,485) #"iterator"
                                                  assignment_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                    conditional_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                      logical_or_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                        logical_and_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                          bitwise_or_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                            bitwise_xor_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                              bitwise_and_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                equality_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                  relational_expression__in => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                    shift_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                      additive_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                        multiplicative_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                          unary_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                            postfix_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                              left_hand_side_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                                new_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                                  member_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                                    primary_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                                      generator_expression => (488,665) #"function*() {\n        var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }\n    }"
                                                                                        formal_parameters__yield => (498,498) #""
                                                                                        generator_body => (510,659) #"var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                          function_body__yield => (510,659) #"var pre = 0, cur = 1;\n        for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                            statement__yield_return => (510,532) #"var pre = 0, cur = 1;\n"
                                                                                              variable_statement__yield => (510,532) #"var pre = 0, cur = 1;\n"
                                                                                                variable_declaration__in_yield => (514,521) #"pre = 0"
                                                                                                  binding_identifier__yield => (514,517) #"pre"
                                                                                                  initializer__in_yield => (518,521) #"= 0"
                                                                                                    assignment_expression__in_yield => (520,521) #"0"
                                                                                                      conditional_expression__in_yield => (520,521) #"0"
                                                                                                        logical_or_expression__in_yield => (520,521) #"0"
                                                                                                          logical_and_expression__in_yield => (520,521) #"0"
                                                                                                            bitwise_or_expression__in_yield => (520,521) #"0"
                                                                                                              bitwise_xor_expression__in_yield => (520,521) #"0"
                                                                                                                bitwise_and_expression__in_yield => (520,521) #"0"
                                                                                                                  equality_expression__in_yield => (520,521) #"0"
                                                                                                                    relational_expression__in_yield => (520,521) #"0"
                                                                                                                      shift_expression__yield => (520,521) #"0"
                                                                                                                        additive_expression__yield => (520,521) #"0"
                                                                                                                          multiplicative_expression__yield => (520,521) #"0"
                                                                                                                            unary_expression__yield => (520,521) #"0"
                                                                                                                              postfix_expression__yield => (520,521) #"0"
                                                                                                                                left_hand_side_expression__yield => (520,521) #"0"
                                                                                                                                  new_expression__yield => (520,521) #"0"
                                                                                                                                    member_expression__yield => (520,521) #"0"
                                                                                                                                      primary_expression__yield => (520,521) #"0"
                                                                                                                                        literal => (520,521) #"0"
                                                                                                                                          numeric_literal => (520,521) #"0"
                                                                                                                                            decimal_literal => (520,521) #"0"
                                                                                                                                              decimal_integer_literal => (520,521) #"0"
                                                                                                variable_declaration__in_yield => (523,530) #"cur = 1"
                                                                                                  binding_identifier__yield => (523,526) #"cur"
                                                                                                  initializer__in_yield => (527,530) #"= 1"
                                                                                                    assignment_expression__in_yield => (529,530) #"1"
                                                                                                      conditional_expression__in_yield => (529,530) #"1"
                                                                                                        logical_or_expression__in_yield => (529,530) #"1"
                                                                                                          logical_and_expression__in_yield => (529,530) #"1"
                                                                                                            bitwise_or_expression__in_yield => (529,530) #"1"
                                                                                                              bitwise_xor_expression__in_yield => (529,530) #"1"
                                                                                                                bitwise_and_expression__in_yield => (529,530) #"1"
                                                                                                                  equality_expression__in_yield => (529,530) #"1"
                                                                                                                    relational_expression__in_yield => (529,530) #"1"
                                                                                                                      shift_expression__yield => (529,530) #"1"
                                                                                                                        additive_expression__yield => (529,530) #"1"
                                                                                                                          multiplicative_expression__yield => (529,530) #"1"
                                                                                                                            unary_expression__yield => (529,530) #"1"
                                                                                                                              postfix_expression__yield => (529,530) #"1"
                                                                                                                                left_hand_side_expression__yield => (529,530) #"1"
                                                                                                                                  new_expression__yield => (529,530) #"1"
                                                                                                                                    member_expression__yield => (529,530) #"1"
                                                                                                                                      primary_expression__yield => (529,530) #"1"
                                                                                                                                        literal => (529,530) #"1"
                                                                                                                                          numeric_literal => (529,530) #"1"
                                                                                                                                            decimal_literal => (529,530) #"1"
                                                                                                                                              decimal_integer_literal => (529,530) #"1"
                                                                                                smart_semicolon => (530,532) #";\n"
                                                                                            statement__yield_return => (540,659) #"for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                              breakable_statement__yield_return => (540,659) #"for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                                iteration_statement__yield_return => (540,659) #"for (;;) {\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                                  statement__yield_return => (549,659) #"{\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                                    block_statement__yield_return => (549,659) #"{\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                                      block__yield_return => (549,659) #"{\n            var temp = pre;\n            pre = cur;\n            cur += temp;\n            yield cur;\n        }"
                                                                                                        statement__yield_return => (563,579) #"var temp = pre;\n"
                                                                                                          variable_statement__yield => (563,579) #"var temp = pre;\n"
                                                                                                            variable_declaration__in_yield => (567,577) #"temp = pre"
                                                                                                              binding_identifier__yield => (567,571) #"temp"
                                                                                                              initializer__in_yield => (572,577) #"= pre"
                                                                                                                assignment_expression__in_yield => (574,577) #"pre"
                                                                                                                  conditional_expression__in_yield => (574,577) #"pre"
                                                                                                                    logical_or_expression__in_yield => (574,577) #"pre"
                                                                                                                      logical_and_expression__in_yield => (574,577) #"pre"
                                                                                                                        bitwise_or_expression__in_yield => (574,577) #"pre"
                                                                                                                          bitwise_xor_expression__in_yield => (574,577) #"pre"
                                                                                                                            bitwise_and_expression__in_yield => (574,577) #"pre"
                                                                                                                              equality_expression__in_yield => (574,577) #"pre"
                                                                                                                                relational_expression__in_yield => (574,577) #"pre"
                                                                                                                                  shift_expression__yield => (574,577) #"pre"
                                                                                                                                    additive_expression__yield => (574,577) #"pre"
                                                                                                                                      multiplicative_expression__yield => (574,577) #"pre"
                                                                                                                                        unary_expression__yield => (574,577) #"pre"
                                                                                                                                          postfix_expression__yield => (574,577) #"pre"
                                                                                                                                            left_hand_side_expression__yield => (574,577) #"pre"
                                                                                                                                              new_expression__yield => (574,577) #"pre"
                                                                                                                                                member_expression__yield => (574,577) #"pre"
                                                                                                                                                  primary_expression__yield => (574,577) #"pre"
                                                                                                                                                    identifier_reference__yield => (574,577) #"pre"
                                                                                                            smart_semicolon => (577,579) #";\n"
                                                                                                        statement__yield_return => (591,602) #"pre = cur;\n"
                                                                                                          expression_statement__yield => (591,602) #"pre = cur;\n"
                                                                                                            expression__in_yield => (591,600) #"pre = cur"
                                                                                                              assignment_expression__in_yield => (591,600) #"pre = cur"
                                                                                                                left_hand_side_expression__yield => (591,595) #"pre "
                                                                                                                  new_expression__yield => (591,595) #"pre "
                                                                                                                    member_expression__yield => (591,595) #"pre "
                                                                                                                      primary_expression__yield => (591,594) #"pre"
                                                                                                                        identifier_reference__yield => (591,594) #"pre"
                                                                                                                assignment_expression__in_yield => (597,600) #"cur"
                                                                                                                  conditional_expression__in_yield => (597,600) #"cur"
                                                                                                                    logical_or_expression__in_yield => (597,600) #"cur"
                                                                                                                      logical_and_expression__in_yield => (597,600) #"cur"
                                                                                                                        bitwise_or_expression__in_yield => (597,600) #"cur"
                                                                                                                          bitwise_xor_expression__in_yield => (597,600) #"cur"
                                                                                                                            bitwise_and_expression__in_yield => (597,600) #"cur"
                                                                                                                              equality_expression__in_yield => (597,600) #"cur"
                                                                                                                                relational_expression__in_yield => (597,600) #"cur"
                                                                                                                                  shift_expression__yield => (597,600) #"cur"
                                                                                                                                    additive_expression__yield => (597,600) #"cur"
                                                                                                                                      multiplicative_expression__yield => (597,600) #"cur"
                                                                                                                                        unary_expression__yield => (597,600) #"cur"
                                                                                                                                          postfix_expression__yield => (597,600) #"cur"
                                                                                                                                            left_hand_side_expression__yield => (597,600) #"cur"
                                                                                                                                              new_expression__yield => (597,600) #"cur"
                                                                                                                                                member_expression__yield => (597,600) #"cur"
                                                                                                                                                  primary_expression__yield => (597,600) #"cur"
                                                                                                                                                    identifier_reference__yield => (597,600) #"cur"
                                                                                                            smart_semicolon => (600,602) #";\n"
                                                                                                        statement__yield_return => (614,627) #"cur += temp;\n"
                                                                                                          expression_statement__yield => (614,627) #"cur += temp;\n"
                                                                                                            expression__in_yield => (614,625) #"cur += temp"
                                                                                                              assignment_expression__in_yield => (614,625) #"cur += temp"
                                                                                                                left_hand_side_expression__yield => (614,618) #"cur "
                                                                                                                  new_expression__yield => (614,618) #"cur "
                                                                                                                    member_expression__yield => (614,618) #"cur "
                                                                                                                      primary_expression__yield => (614,617) #"cur"
                                                                                                                        identifier_reference__yield => (614,617) #"cur"
                                                                                                                assignment_operator => (618,620) #"+="
                                                                                                                assignment_expression__in_yield => (621,625) #"temp"
                                                                                                                  conditional_expression__in_yield => (621,625) #"temp"
                                                                                                                    logical_or_expression__in_yield => (621,625) #"temp"
                                                                                                                      logical_and_expression__in_yield => (621,625) #"temp"
                                                                                                                        bitwise_or_expression__in_yield => (621,625) #"temp"
                                                                                                                          bitwise_xor_expression__in_yield => (621,625) #"temp"
                                                                                                                            bitwise_and_expression__in_yield => (621,625) #"temp"
                                                                                                                              equality_expression__in_yield => (621,625) #"temp"
                                                                                                                                relational_expression__in_yield => (621,625) #"temp"
                                                                                                                                  shift_expression__yield => (621,625) #"temp"
                                                                                                                                    additive_expression__yield => (621,625) #"temp"
                                                                                                                                      multiplicative_expression__yield => (621,625) #"temp"
                                                                                                                                        unary_expression__yield => (621,625) #"temp"
                                                                                                                                          postfix_expression__yield => (621,625) #"temp"
                                                                                                                                            left_hand_side_expression__yield => (621,625) #"temp"
                                                                                                                                              new_expression__yield => (621,625) #"temp"
                                                                                                                                                member_expression__yield => (621,625) #"temp"
                                                                                                                                                  primary_expression__yield => (621,625) #"temp"
                                                                                                                                                    identifier_reference__yield => (621,625) #"temp"
                                                                                                            smart_semicolon => (625,627) #";\n"
                                                                                                        statement__yield_return => (639,650) #"yield cur;\n"
                                                                                                          expression_statement__yield => (639,650) #"yield cur;\n"
                                                                                                            expression__in_yield => (639,648) #"yield cur"
                                                                                                              assignment_expression__in_yield => (639,648) #"yield cur"
                                                                                                                yield_expression__in => (639,648) #"yield cur"
                                                                                                                  assignment_expression__in_yield => (645,648) #"cur"
                                                                                                                    conditional_expression__in_yield => (645,648) #"cur"
                                                                                                                      logical_or_expression__in_yield => (645,648) #"cur"
                                                                                                                        logical_and_expression__in_yield => (645,648) #"cur"
                                                                                                                          bitwise_or_expression__in_yield => (645,648) #"cur"
                                                                                                                            bitwise_xor_expression__in_yield => (645,648) #"cur"
                                                                                                                              bitwise_and_expression__in_yield => (645,648) #"cur"
                                                                                                                                equality_expression__in_yield => (645,648) #"cur"
                                                                                                                                  relational_expression__in_yield => (645,648) #"cur"
                                                                                                                                    shift_expression__yield => (645,648) #"cur"
                                                                                                                                      additive_expression__yield => (645,648) #"cur"
                                                                                                                                        multiplicative_expression__yield => (645,648) #"cur"
                                                                                                                                          unary_expression__yield => (645,648) #"cur"
                                                                                                                                            postfix_expression__yield => (645,648) #"cur"
                                                                                                                                              left_hand_side_expression__yield => (645,648) #"cur"
                                                                                                                                                new_expression__yield => (645,648) #"cur"
                                                                                                                                                  member_expression__yield => (645,648) #"cur"
                                                                                                                                                    primary_expression__yield => (645,648) #"cur"
                                                                                                                                                      identifier_reference__yield => (645,648) #"cur"
                                                                                                            smart_semicolon => (648,650) #";\n"
    smart_semicolon => (667,668) #"\n"
statement => (770,888) #"for (var n of fibonacci) {\n    // truncate the sequence at 1000\n    if (n > 1000)\n        break;\n    console.log(n);\n}"
  breakable_statement => (770,888) #"for (var n of fibonacci) {\n    // truncate the sequence at 1000\n    if (n > 1000)\n        break;\n    console.log(n);\n}"
    iteration_statement => (770,888) #"for (var n of fibonacci) {\n    // truncate the sequence at 1000\n    if (n > 1000)\n        break;\n    console.log(n);\n}"
      for_binding => (779,780) #"n"
        binding_identifier => (779,780) #"n"
      assignment_expression__in => (784,793) #"fibonacci"
        conditional_expression__in => (784,793) #"fibonacci"
          logical_or_expression__in => (784,793) #"fibonacci"
            logical_and_expression__in => (784,793) #"fibonacci"
              bitwise_or_expression__in => (784,793) #"fibonacci"
                bitwise_xor_expression__in => (784,793) #"fibonacci"
                  bitwise_and_expression__in => (784,793) #"fibonacci"
                    equality_expression__in => (784,793) #"fibonacci"
                      relational_expression__in => (784,793) #"fibonacci"
                        shift_expression => (784,793) #"fibonacci"
                          additive_expression => (784,793) #"fibonacci"
                            multiplicative_expression => (784,793) #"fibonacci"
                              unary_expression => (784,793) #"fibonacci"
                                postfix_expression => (784,793) #"fibonacci"
                                  left_hand_side_expression => (784,793) #"fibonacci"
                                    new_expression => (784,793) #"fibonacci"
                                      member_expression => (784,793) #"fibonacci"
                                        primary_expression => (784,793) #"fibonacci"
                                          identifier_reference => (784,793) #"fibonacci"
      statement => (795,888) #"{\n    // truncate the sequence at 1000\n    if (n > 1000)\n        break;\n    console.log(n);\n}"
        block_statement => (795,888) #"{\n    // truncate the sequence at 1000\n    if (n > 1000)\n        break;\n    console.log(n);\n}"
          block => (795,888) #"{\n    // truncate the sequence at 1000\n    if (n > 1000)\n        break;\n    console.log(n);\n}"
            statement => (838,867) #"if (n > 1000)\n        break;\n"
              if_statement => (838,867) #"if (n > 1000)\n        break;\n"
                expression__in => (842,850) #"n > 1000"
                  assignment_expression__in => (842,850) #"n > 1000"
                    conditional_expression__in => (842,850) #"n > 1000"
                      logical_or_expression__in => (842,850) #"n > 1000"
                        logical_and_expression__in => (842,850) #"n > 1000"
                          bitwise_or_expression__in => (842,850) #"n > 1000"
                            bitwise_xor_expression__in => (842,850) #"n > 1000"
                              bitwise_and_expression__in => (842,850) #"n > 1000"
                                equality_expression__in => (842,850) #"n > 1000"
                                  relational_expression__in => (842,850) #"n > 1000"
                                    shift_expression => (842,844) #"n "
                                      additive_expression => (842,844) #"n "
                                        multiplicative_expression => (842,844) #"n "
                                          unary_expression => (842,844) #"n "
                                            postfix_expression => (842,844) #"n "
                                              left_hand_side_expression => (842,844) #"n "
                                                new_expression => (842,844) #"n "
                                                  member_expression => (842,844) #"n "
                                                    primary_expression => (842,843) #"n"
                                                      identifier_reference => (842,843) #"n"
                                    relational_operator__in => (844,845) #">"
                                    shift_expression => (846,850) #"1000"
                                      additive_expression => (846,850) #"1000"
                                        multiplicative_expression => (846,850) #"1000"
                                          unary_expression => (846,850) #"1000"
                                            postfix_expression => (846,850) #"1000"
                                              left_hand_side_expression => (846,850) #"1000"
                                                new_expression => (846,850) #"1000"
                                                  member_expression => (846,850) #"1000"
                                                    primary_expression => (846,850) #"1000"
                                                      literal => (846,850) #"1000"
                                                        numeric_literal => (846,850) #"1000"
                                                          decimal_literal => (846,850) #"1000"
                                                            decimal_integer_literal => (846,850) #"1000"
                statement => (860,867) #"break;\n"
                  break_statement => (860,867) #"break;\n"
                    smart_semicolon => (865,867) #";\n"
            statement => (871,887) #"console.log(n);\n"
              expression_statement => (871,887) #"console.log(n);\n"
                expression__in => (871,885) #"console.log(n)"
                  assignment_expression__in => (871,885) #"console.log(n)"
                    conditional_expression__in => (871,885) #"console.log(n)"
                      logical_or_expression__in => (871,885) #"console.log(n)"
                        logical_and_expression__in => (871,885) #"console.log(n)"
                          bitwise_or_expression__in => (871,885) #"console.log(n)"
                            bitwise_xor_expression__in => (871,885) #"console.log(n)"
                              bitwise_and_expression__in => (871,885) #"console.log(n)"
                                equality_expression__in => (871,885) #"console.log(n)"
                                  relational_expression__in => (871,885) #"console.log(n)"
                                    shift_expression => (871,885) #"console.log(n)"
                                      additive_expression => (871,885) #"console.log(n)"
                                        multiplicative_expression => (871,885) #"console.log(n)"
                                          unary_expression => (871,885) #"console.log(n)"
                                            postfix_expression => (871,885) #"console.log(n)"
                                              left_hand_side_expression => (871,885) #"console.log(n)"
                                                call_expression => (871,885) #"console.log(n)"
                                                  member_expression => (871,882) #"console.log"
                                                    primary_expression => (871,878) #"console"
                                                      identifier_reference => (871,878) #"console"
                                                    identifier_name => (879,882) #"log"
                                                  arguments => (882,885) #"(n)"
                                                    argument_list => (883,884) #"n"
                                                      assignment_expression__in => (883,884) #"n"
                                                        conditional_expression__in => (883,884) #"n"
                                                          logical_or_expression__in => (883,884) #"n"
                                                            logical_and_expression__in => (883,884) #"n"
                                                              bitwise_or_expression__in => (883,884) #"n"
                                                                bitwise_xor_expression__in => (883,884) #"n"
                                                                  bitwise_and_expression__in => (883,884) #"n"
                                                                    equality_expression__in => (883,884) #"n"
                                                                      relational_expression__in => (883,884) #"n"
                                                                        shift_expression => (883,884) #"n"
                                                                          additive_expression => (883,884) #"n"
                                                                            multiplicative_expression => (883,884) #"n"
                                                                              unary_expression => (883,884) #"n"
                                                                                postfix_expression => (883,884) #"n"
                                                                                  left_hand_side_expression => (883,884) #"n"
                                                                                    new_expression => (883,884) #"n"
                                                                                      member_expression => (883,884) #"n"
                                                                                        primary_expression => (883,884) #"n"
                                                                                          identifier_reference => (883,884) #"n"
                smart_semicolon => (885,887) #";\n"
declaration => (890,949) #"function *generator() {\n    (yield (yield 10) + \'world\');\n}"
  hoistable_declaration => (890,949) #"function *generator() {\n    (yield (yield 10) + \'world\');\n}"
    generator_declaration => (890,949) #"function *generator() {\n    (yield (yield 10) + \'world\');\n}"
      binding_identifier => (900,909) #"generator"
      formal_parameters => (910,910) #""
      generator_body => (918,948) #"(yield (yield 10) + \'world\');\n"
        function_body__yield => (918,948) #"(yield (yield 10) + \'world\');\n"
          statement__yield_return => (918,948) #"(yield (yield 10) + \'world\');\n"
            expression_statement__yield => (918,948) #"(yield (yield 10) + \'world\');\n"
              expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                assignment_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                  conditional_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                    logical_or_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                      logical_and_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                        bitwise_or_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                          bitwise_xor_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                            bitwise_and_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                              equality_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                                relational_expression__in_yield => (918,946) #"(yield (yield 10) + \'world\')"
                                  shift_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                    additive_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                      multiplicative_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                        unary_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                          postfix_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                            left_hand_side_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                              new_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                                member_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                                  primary_expression__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                                    cover_parenthesized_expression_and_arrow_parameter_list__yield => (918,946) #"(yield (yield 10) + \'world\')"
                                                      expression__in_yield => (919,945) #"yield (yield 10) + \'world\'"
                                                        assignment_expression__in_yield => (919,945) #"yield (yield 10) + \'world\'"
                                                          yield_expression__in => (919,945) #"yield (yield 10) + \'world\'"
                                                            assignment_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                              conditional_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                logical_or_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                  logical_and_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                    bitwise_or_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                      bitwise_xor_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                        bitwise_and_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                          equality_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                            relational_expression__in_yield => (925,945) #"(yield 10) + \'world\'"
                                                                              shift_expression__yield => (925,945) #"(yield 10) + \'world\'"
                                                                                additive_expression__yield => (925,945) #"(yield 10) + \'world\'"
                                                                                  multiplicative_expression__yield => (925,936) #"(yield 10) "
                                                                                    unary_expression__yield => (925,936) #"(yield 10) "
                                                                                      postfix_expression__yield => (925,936) #"(yield 10) "
                                                                                        left_hand_side_expression__yield => (925,936) #"(yield 10) "
                                                                                          new_expression__yield => (925,936) #"(yield 10) "
                                                                                            member_expression__yield => (925,936) #"(yield 10) "
                                                                                              primary_expression__yield => (925,935) #"(yield 10)"
                                                                                                cover_parenthesized_expression_and_arrow_parameter_list__yield => (925,935) #"(yield 10)"
                                                                                                  expression__in_yield => (926,934) #"yield 10"
                                                                                                    assignment_expression__in_yield => (926,934) #"yield 10"
                                                                                                      yield_expression__in => (926,934) #"yield 10"
                                                                                                        assignment_expression__in_yield => (932,934) #"10"
                                                                                                          conditional_expression__in_yield => (932,934) #"10"
                                                                                                            logical_or_expression__in_yield => (932,934) #"10"
                                                                                                              logical_and_expression__in_yield => (932,934) #"10"
                                                                                                                bitwise_or_expression__in_yield => (932,934) #"10"
                                                                                                                  bitwise_xor_expression__in_yield => (932,934) #"10"
                                                                                                                    bitwise_and_expression__in_yield => (932,934) #"10"
                                                                                                                      equality_expression__in_yield => (932,934) #"10"
                                                                                                                        relational_expression__in_yield => (932,934) #"10"
                                                                                                                          shift_expression__yield => (932,934) #"10"
                                                                                                                            additive_expression__yield => (932,934) #"10"
                                                                                                                              multiplicative_expression__yield => (932,934) #"10"
                                                                                                                                unary_expression__yield => (932,934) #"10"
                                                                                                                                  postfix_expression__yield => (932,934) #"10"
                                                                                                                                    left_hand_side_expression__yield => (932,934) #"10"
                                                                                                                                      new_expression__yield => (932,934) #"10"
                                                                                                                                        member_expression__yield => (932,934) #"10"
                                                                                                                                          primary_expression__yield => (932,934) #"10"
                                                                                                                                            literal => (932,934) #"10"
                                                                                                                                              numeric_literal => (932,934) #"10"
                                                                                                                                                decimal_literal => (932,934) #"10"
                                                                                                                                                  decimal_integer_literal => (932,934) #"10"
                                                                                  additive_operator => (936,937) #"+"
                                                                                  multiplicative_expression__yield => (938,945) #"\'world\'"
                                                                                    unary_expression__yield => (938,945) #"\'world\'"
                                                                                      postfix_expression__yield => (938,945) #"\'world\'"
                                                                                        left_hand_side_expression__yield => (938,945) #"\'world\'"
                                                                                          new_expression__yield => (938,945) #"\'world\'"
                                                                                            member_expression__yield => (938,945) #"\'world\'"
                                                                                              primary_expression__yield => (938,945) #"\'world\'"
                                                                                                literal => (938,945) #"\'world\'"
                                                                                                  string_literal => (938,945) #"\'world\'"
              smart_semicolon => (946,948) #";\n"
statement => (951,974) #"var gen = generator();\n"
  variable_statement => (951,974) #"var gen = generator();\n"
    variable_declaration__in => (955,972) #"gen = generator()"
      binding_identifier => (955,958) #"gen"
      initializer__in => (959,972) #"= generator()"
        assignment_expression__in => (961,972) #"generator()"
          conditional_expression__in => (961,972) #"generator()"
            logical_or_expression__in => (961,972) #"generator()"
              logical_and_expression__in => (961,972) #"generator()"
                bitwise_or_expression__in => (961,972) #"generator()"
                  bitwise_xor_expression__in => (961,972) #"generator()"
                    bitwise_and_expression__in => (961,972) #"generator()"
                      equality_expression__in => (961,972) #"generator()"
                        relational_expression__in => (961,972) #"generator()"
                          shift_expression => (961,972) #"generator()"
                            additive_expression => (961,972) #"generator()"
                              multiplicative_expression => (961,972) #"generator()"
                                unary_expression => (961,972) #"generator()"
                                  postfix_expression => (961,972) #"generator()"
                                    left_hand_side_expression => (961,972) #"generator()"
                                      call_expression => (961,972) #"generator()"
                                        member_expression => (961,970) #"generator"
                                          primary_expression => (961,970) #"generator"
                                            identifier_reference => (961,970) #"generator"
                                        arguments => (970,972) #"()"
    smart_semicolon => (972,974) #";\n"
statement => (1107,1145) #"console.log(gen.next(\'hello\').value);\n"
  expression_statement => (1107,1145) #"console.log(gen.next(\'hello\').value);\n"
    expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
      assignment_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
        conditional_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
          logical_or_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
            logical_and_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
              bitwise_or_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                bitwise_xor_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                  bitwise_and_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                    equality_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                      relational_expression__in => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                        shift_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                          additive_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                            multiplicative_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                              unary_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                                postfix_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                                  left_hand_side_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                                    call_expression => (1107,1143) #"console.log(gen.next(\'hello\').value)"
                                      member_expression => (1107,1118) #"console.log"
                                        primary_expression => (1107,1114) #"console"
                                          identifier_reference => (1107,1114) #"console"
                                        identifier_name => (1115,1118) #"log"
                                      arguments => (1118,1143) #"(gen.next(\'hello\').value)"
                                        argument_list => (1119,1142) #"gen.next(\'hello\').value"
                                          assignment_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                            conditional_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                              logical_or_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                logical_and_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                  bitwise_or_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                    bitwise_xor_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                      bitwise_and_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                        equality_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                          relational_expression__in => (1119,1142) #"gen.next(\'hello\').value"
                                                            shift_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                              additive_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                                multiplicative_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                                  unary_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                                    postfix_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                                      left_hand_side_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                                        call_expression => (1119,1142) #"gen.next(\'hello\').value"
                                                                          member_expression => (1119,1127) #"gen.next"
                                                                            primary_expression => (1119,1122) #"gen"
                                                                              identifier_reference => (1119,1122) #"gen"
                                                                            identifier_name => (1123,1127) #"next"
                                                                          arguments => (1127,1136) #"(\'hello\')"
                                                                            argument_list => (1128,1135) #"\'hello\'"
                                                                              assignment_expression__in => (1128,1135) #"\'hello\'"
                                                                                conditional_expression__in => (1128,1135) #"\'hello\'"
                                                                                  logical_or_expression__in => (1128,1135) #"\'hello\'"
                                                                                    logical_and_expression__in => (1128,1135) #"\'hello\'"
                                                                                      bitwise_or_expression__in => (1128,1135) #"\'hello\'"
                                                                                        bitwise_xor_expression__in => (1128,1135) #"\'hello\'"
                                                                                          bitwise_and_expression__in => (1128,1135) #"\'hello\'"
                                                                                            equality_expression__in => (1128,1135) #"\'hello\'"
                                                                                              relational_expression__in => (1128,1135) #"\'hello\'"
                                                                                                shift_expression => (1128,1135) #"\'hello\'"
                                                                                                  additive_expression => (1128,1135) #"\'hello\'"
                                                                                                    multiplicative_expression => (1128,1135) #"\'hello\'"
                                                                                                      unary_expression => (1128,1135) #"\'hello\'"
                                                                                                        postfix_expression => (1128,1135) #"\'hello\'"
                                                                                                          left_hand_side_expression => (1128,1135) #"\'hello\'"
                                                                                                            new_expression => (1128,1135) #"\'hello\'"
                                                                                                              member_expression => (1128,1135) #"\'hello\'"
                                                                                                                primary_expression => (1128,1135) #"\'hello\'"
                                                                                                                  literal => (1128,1135) #"\'hello\'"
                                                                                                                    string_literal => (1128,1135) #"\'hello\'"
                                                                          identifier_name => (1137,1142) #"value"
    smart_semicolon => (1143,1145) #";\n"
statement => (1145,1177) #"console.log(gen.next(0).value);\n"
  expression_statement => (1145,1177) #"console.log(gen.next(0).value);\n"
    expression__in => (1145,1175) #"console.log(gen.next(0).value)"
      assignment_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
        conditional_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
          logical_or_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
            logical_and_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
              bitwise_or_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
                bitwise_xor_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
                  bitwise_and_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
                    equality_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
                      relational_expression__in => (1145,1175) #"console.log(gen.next(0).value)"
                        shift_expression => (1145,1175) #"console.log(gen.next(0).value)"
                          additive_expression => (1145,1175) #"console.log(gen.next(0).value)"
                            multiplicative_expression => (1145,1175) #"console.log(gen.next(0).value)"
                              unary_expression => (1145,1175) #"console.log(gen.next(0).value)"
                                postfix_expression => (1145,1175) #"console.log(gen.next(0).value)"
                                  left_hand_side_expression => (1145,1175) #"console.log(gen.next(0).value)"
                                    call_expression => (1145,1175) #"console.log(gen.next(0).value)"
                                      member_expression => (1145,1156) #"console.log"
                                        primary_expression => (1145,1152) #"console"
                                          identifier_reference => (1145,1152) #"console"
                                        identifier_name => (1153,1156) #"log"
                                      arguments => (1156,1175) #"(gen.next(0).value)"
                                        argument_list => (1157,1174) #"gen.next(0).value"
                                          assignment_expression__in => (1157,1174) #"gen.next(0).value"
                                            conditional_expression__in => (1157,1174) #"gen.next(0).value"
                                              logical_or_expression__in => (1157,1174) #"gen.next(0).value"
                                                logical_and_expression__in => (1157,1174) #"gen.next(0).value"
                                                  bitwise_or_expression__in => (1157,1174) #"gen.next(0).value"
                                                    bitwise_xor_expression__in => (1157,1174) #"gen.next(0).value"
                                                      bitwise_and_expression__in => (1157,1174) #"gen.next(0).value"
                                                        equality_expression__in => (1157,1174) #"gen.next(0).value"
                                                          relational_expression__in => (1157,1174) #"gen.next(0).value"
                                                            shift_expression => (1157,1174) #"gen.next(0).value"
                                                              additive_expression => (1157,1174) #"gen.next(0).value"
                                                                multiplicative_expression => (1157,1174) #"gen.next(0).value"
                                                                  unary_expression => (1157,1174) #"gen.next(0).value"
                                                                    postfix_expression => (1157,1174) #"gen.next(0).value"
                                                                      left_hand_side_expression => (1157,1174) #"gen.next(0).value"
                                                                        call_expression => (1157,1174) #"gen.next(0).value"
                                                                          member_expression => (1157,1165) #"gen.next"
                                                                            primary_expression => (1157,1160) #"gen"
                                                                              identifier_reference => (1157,1160) #"gen"
                                                                            identifier_name => (1161,1165) #"next"
                                                                          arguments => (1165,1168) #"(0)"
                                                                            argument_list => (1166,1167) #"0"
                                                                              assignment_expression__in => (1166,1167) #"0"
                                                                                conditional_expression__in => (1166,1167) #"0"
                                                                                  logical_or_expression__in => (1166,1167) #"0"
                                                                                    logical_and_expression__in => (1166,1167) #"0"
                                                                                      bitwise_or_expression__in => (1166,1167) #"0"
                                                                                        bitwise_xor_expression__in => (1166,1167) #"0"
                                                                                          bitwise_and_expression__in => (1166,1167) #"0"
                                                                                            equality_expression__in => (1166,1167) #"0"
                                                                                              relational_expression__in => (1166,1167) #"0"
                                                                                                shift_expression => (1166,1167) #"0"
                                                                                                  additive_expression => (1166,1167) #"0"
                                                                                                    multiplicative_expression => (1166,1167) #"0"
                                                                                                      unary_expression => (1166,1167) #"0"
                                                                                                        postfix_expression => (1166,1167) #"0"
                                                                                                          left_hand_side_expression => (1166,1167) #"0"
                                                                                                            new_expression => (1166,1167) #"0"
                                                                                                              member_expression => (1166,1167) #"0"
                                                                                                                primary_expression => (1166,1167) #"0"
                                                                                                                  literal => (1166,1167) #"0"
                                                                                                                    numeric_literal => (1166,1167) #"0"
                                                                                                                      decimal_literal => (1166,1167) #"0"
                                                                                                                        decimal_integer_literal => (1166,1167) #"0"
                                                                          identifier_name => (1169,1174) #"value"
    smart_semicolon => (1175,1177) #";\n"
statement => (1177,1208) #"console.log(gen.next().value);\n"
  expression_statement => (1177,1208) #"console.log(gen.next().value);\n"
    expression__in => (1177,1206) #"console.log(gen.next().value)"
      assignment_expression__in => (1177,1206) #"console.log(gen.next().value)"
        conditional_expression__in => (1177,1206) #"console.log(gen.next().value)"
          logical_or_expression__in => (1177,1206) #"console.log(gen.next().value)"
            logical_and_expression__in => (1177,1206) #"console.log(gen.next().value)"
              bitwise_or_expression__in => (1177,1206) #"console.log(gen.next().value)"
                bitwise_xor_expression__in => (1177,1206) #"console.log(gen.next().value)"
                  bitwise_and_expression__in => (1177,1206) #"console.log(gen.next().value)"
                    equality_expression__in => (1177,1206) #"console.log(gen.next().value)"
                      relational_expression__in => (1177,1206) #"console.log(gen.next().value)"
                        shift_expression => (1177,1206) #"console.log(gen.next().value)"
                          additive_expression => (1177,1206) #"console.log(gen.next().value)"
                            multiplicative_expression => (1177,1206) #"console.log(gen.next().value)"
                              unary_expression => (1177,1206) #"console.log(gen.next().value)"
                                postfix_expression => (1177,1206) #"console.log(gen.next().value)"
                                  left_hand_side_expression => (1177,1206) #"console.log(gen.next().value)"
                                    call_expression => (1177,1206) #"console.log(gen.next().value)"
                                      member_expression => (1177,1188) #"console.log"
                                        primary_expression => (1177,1184) #"console"
                                          identifier_reference => (1177,1184) #"console"
                                        identifier_name => (1185,1188) #"log"
                                      arguments => (1188,1206) #"(gen.next().value)"
                                        argument_list => (1189,1205) #"gen.next().value"
                                          assignment_expression__in => (1189,1205) #"gen.next().value"
                                            conditional_expression__in => (1189,1205) #"gen.next().value"
                                              logical_or_expression__in => (1189,1205) #"gen.next().value"
                                                logical_and_expression__in => (1189,1205) #"gen.next().value"
                                                  bitwise_or_expression__in => (1189,1205) #"gen.next().value"
                                                    bitwise_xor_expression__in => (1189,1205) #"gen.next().value"
                                                      bitwise_and_expression__in => (1189,1205) #"gen.next().value"
                                                        equality_expression__in => (1189,1205) #"gen.next().value"
                                                          relational_expression__in => (1189,1205) #"gen.next().value"
                                                            shift_expression => (1189,1205) #"gen.next().value"
                                                              additive_expression => (1189,1205) #"gen.next().value"
                                                                multiplicative_expression => (1189,1205) #"gen.next().value"
                                                                  unary_expression => (1189,1205) #"gen.next().value"
                                                                    postfix_expression => (1189,1205) #"gen.next().value"
                                                                      left_hand_side_expression => (1189,1205) #"gen.next().value"
                                                                        call_expression => (1189,1205) #"gen.next().value"
                                                                          member_expression => (1189,1197) #"gen.next"
                                                                            primary_expression => (1189,1192) #"gen"
                                                                              identifier_reference => (1189,1192) #"gen"
                                                                            identifier_name => (1193,1197) #"next"
                                                                          arguments => (1197,1199) #"()"
                                                                          identifier_name => (1200,1205) #"value"
    smart_semicolon => (1206,1208) #";\n"
declaration => (1277,1324) #"function *compose() {\n    yield* generator();\n}"
  hoistable_declaration => (1277,1324) #"function *compose() {\n    yield* generator();\n}"
    generator_declaration => (1277,1324) #"function *compose() {\n    yield* generator();\n}"
      binding_identifier => (1287,1294) #"compose"
      formal_parameters => (1295,1295) #""
      generator_body => (1303,1323) #"yield* generator();\n"
        function_body__yield => (1303,1323) #"yield* generator();\n"
          statement__yield_return => (1303,1323) #"yield* generator();\n"
            expression_statement__yield => (1303,1323) #"yield* generator();\n"
              expression__in_yield => (1303,1321) #"yield* generator()"
                assignment_expression__in_yield => (1303,1321) #"yield* generator()"
                  yield_expression__in => (1303,1321) #"yield* generator()"
                    assignment_expression__in_yield => (1310,1321) #"generator()"
                      conditional_expression__in_yield => (1310,1321) #"generator()"
                        logical_or_expression__in_yield => (1310,1321) #"generator()"
                          logical_and_expression__in_yield => (1310,1321) #"generator()"
                            bitwise_or_expression__in_yield => (1310,1321) #"generator()"
                              bitwise_xor_expression__in_yield => (1310,1321) #"generator()"
                                bitwise_and_expression__in_yield => (1310,1321) #"generator()"
                                  equality_expression__in_yield => (1310,1321) #"generator()"
                                    relational_expression__in_yield => (1310,1321) #"generator()"
                                      shift_expression__yield => (1310,1321) #"generator()"
                                        additive_expression__yield => (1310,1321) #"generator()"
                                          multiplicative_expression__yield => (1310,1321) #"generator()"
                                            unary_expression__yield => (1310,1321) #"generator()"
                                              postfix_expression__yield => (1310,1321) #"generator()"
                                                left_hand_side_expression__yield => (1310,1321) #"generator()"
                                                  call_expression__yield => (1310,1321) #"generator()"
                                                    member_expression__yield => (1310,1319) #"generator"
                                                      primary_expression__yield => (1310,1319) #"generator"
                                                        identifier_reference__yield => (1310,1319) #"generator"
                                                    arguments__yield => (1319,1321) #"()"
              smart_semicolon => (1321,1323) #";\n"
statement => (1326,1363) #"console.log(compose().next().value);\n"
  expression_statement => (1326,1363) #"console.log(compose().next().value);\n"
    expression__in => (1326,1361) #"console.log(compose().next().value)"
      assignment_expression__in => (1326,1361) #"console.log(compose().next().value)"
        conditional_expression__in => (1326,1361) #"console.log(compose().next().value)"
          logical_or_expression__in => (1326,1361) #"console.log(compose().next().value)"
            logical_and_expression__in => (1326,1361) #"console.log(compose().next().value)"
              bitwise_or_expression__in => (1326,1361) #"console.log(compose().next().value)"
                bitwise_xor_expression__in => (1326,1361) #"console.log(compose().next().value)"
                  bitwise_and_expression__in => (1326,1361) #"console.log(compose().next().value)"
                    equality_expression__in => (1326,1361) #"console.log(compose().next().value)"
                      relational_expression__in => (1326,1361) #"console.log(compose().next().value)"
                        shift_expression => (1326,1361) #"console.log(compose().next().value)"
                          additive_expression => (1326,1361) #"console.log(compose().next().value)"
                            multiplicative_expression => (1326,1361) #"console.log(compose().next().value)"
                              unary_expression => (1326,1361) #"console.log(compose().next().value)"
                                postfix_expression => (1326,1361) #"console.log(compose().next().value)"
                                  left_hand_side_expression => (1326,1361) #"console.log(compose().next().value)"
                                    call_expression => (1326,1361) #"console.log(compose().next().value)"
                                      member_expression => (1326,1337) #"console.log"
                                        primary_expression => (1326,1333) #"console"
                                          identifier_reference => (1326,1333) #"console"
                                        identifier_name => (1334,1337) #"log"
                                      arguments => (1337,1361) #"(compose().next().value)"
                                        argument_list => (1338,1360) #"compose().next().value"
                                          assignment_expression__in => (1338,1360) #"compose().next().value"
                                            conditional_expression__in => (1338,1360) #"compose().next().value"
                                              logical_or_expression__in => (1338,1360) #"compose().next().value"
                                                logical_and_expression__in => (1338,1360) #"compose().next().value"
                                                  bitwise_or_expression__in => (1338,1360) #"compose().next().value"
                                                    bitwise_xor_expression__in => (1338,1360) #"compose().next().value"
                                                      bitwise_and_expression__in => (1338,1360) #"compose().next().value"
                                                        equality_expression__in => (1338,1360) #"compose().next().value"
                                                          relational_expression__in => (1338,1360) #"compose().next().value"
                                                            shift_expression => (1338,1360) #"compose().next().value"
                                                              additive_expression => (1338,1360) #"compose().next().value"
                                                                multiplicative_expression => (1338,1360) #"compose().next().value"
                                                                  unary_expression => (1338,1360) #"compose().next().value"
                                                                    postfix_expression => (1338,1360) #"compose().next().value"
                                                                      left_hand_side_expression => (1338,1360) #"compose().next().value"
                                                                        call_expression => (1338,1360) #"compose().next().value"
                                                                          member_expression => (1338,1345) #"compose"
                                                                            primary_expression => (1338,1345) #"compose"
                                                                              identifier_reference => (1338,1345) #"compose"
                                                                          arguments => (1345,1347) #"()"
                                                                          identifier_name => (1348,1352) #"next"
                                                                          arguments => (1352,1354) #"()"
                                                                          identifier_name => (1355,1360) #"value"
    smart_semicolon => (1361,1363) #";\n"
